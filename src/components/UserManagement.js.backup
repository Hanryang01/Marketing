import React, { useRef } from 'react';
import './UserManagement.css';

// Import the UserDetailModal component
import UserDetailModal from './UserDetailModal';
import AddUserModal from './AddUserModal';
import ApprovalModal from './ApprovalModal';
import MessageModal from './MessageModal';
import RevenueModal from './RevenueModal';
import SearchFilters from './common/SearchFilters';
import UserTable from './UserManagement/UserTable';

// 커스텀 훅들
import { useMessage } from '../hooks/useMessage';
import { useCalendar } from '../hooks/useCalendar';
import useUserData from '../hooks/useUserData';
import useUserFilters from '../hooks/useUserFilters';
import useUserActions from '../hooks/useUserActions';
import useUserModals from '../hooks/useUserModals';

import { isValidBusinessLicense } from '../utils/businessLicenseUtils';
import { isUserActive } from '../utils/userUtils';
import { apiCall, API_ENDPOINTS } from '../config/api';

const UserManagement = () => {
  // 커스텀 훅들 사용
  const { users, setUsers, loading, companyHistory } = useUserData();
  const { 
    searchFilters, 
    activeTab, 
    handleFilterChange, 
    handleTabChange, 
    getFilteredUsers 
  } = useUserFilters(users);
  const { handleAddUser, handleDetailSave, handleDeleteUser } = useUserActions(setUsers, showMessageRef);
  const {
    showAddUserModal,
    showDetailModal,
    showApprovalModal,
    showRevenueModal,
    selectedUser,
    approvalUser,
    revenueUser,
    newUser,
    setNewUser,
    handleOpenAddUserModal,
    handleCloseAddUserModal,
    handleOpenDetailModal,
    handleCloseDetailModal,
    handleOpenApprovalModal,
    handleCloseApprovalModal,
    handleOpenRevenueModal,
    handleCloseRevenueModal,
    handleDoubleClick
  } = useUserModals();
  
  // 메시지 관련 로직을 useMessage 훅으로 분리
  const messageProps = useMessage();
  const { showMessage } = messageProps;
  const showMessageRef = useRef(showMessage);
  
  // showMessage 함수가 변경될 때마다 ref 업데이트
  React.useEffect(() => {
    showMessageRef.current = showMessage;
  }, [showMessage]);
  
  // 날짜 처리 관련 로직을 useCalendar 훅으로 분리
  const calendarProps = useCalendar();
  const { formatDate } = calendarProps;
  
  // 필터 필드 설정
  const userFilterFields = [
    { name: 'id', placeholder: '사용자 ID 검색' },
    { name: 'name', placeholder: '이름 검색' },
    { name: 'companyName', placeholder: '회사명 검색' }
  ];




    
    return tabFilteredData.filter(user => {
      const idMatch = !searchFilters.id || user.userId?.toLowerCase().includes(searchFilters.id.toLowerCase());
      const nameMatch = !searchFilters.name || user.userName?.toLowerCase().includes(searchFilters.name.toLowerCase());
      const companyMatch = !searchFilters.companyName || user.companyName?.toLowerCase().includes(searchFilters.companyName.toLowerCase());
      
      return idMatch && nameMatch && companyMatch;
    });
  };

  // 필터 변경 핸들러
  const handleFilterChange = (field, value) => {
    setSearchFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // 사용자 상세보기
  const handleUserDetail = (user) => {
    setSelectedUser(user);
    setShowDetailModal(true);
  };

  // 더블클릭 핸들러
  const handleDoubleClick = (user) => {
    // 승인 이력 탭에서는 더블 클릭 비활성화
    if (activeTab === '승인') {
      return;
    }
    handleUserDetail(user);
  };



  // 사용자 상세 저장
  const handleDetailSave = async (userData) => {
    try {
      // 사업자등록번호 유효성 검사
      if (userData.business_license && !isValidBusinessLicense(userData.business_license)) {
        showMessage('error', '사업자등록번호 오류', '사업자등록번호는 숫자 10자리여야 합니다.', {
          showCancel: false,
          confirmText: '확인'
        });
        return;
      }
      
      // 승인 탭에서 수정하는 경우, 실제 사용자 ID를 찾아서 사용
      let actualUserId = userData.id;
      
      if (activeTab === '승인' && selectedUser) {
        // 승인 이력에서 실제 사용자 ID 찾기
        const historyItem = companyHistory.find(history => 
          history.user_id_string === selectedUser.userId && 
          history.company_name === selectedUser.companyName
        );
        
        if (historyItem && historyItem.user_id) {
          actualUserId = historyItem.user_id;
        } else {
          // 승인 이력에서 찾을 수 없는 경우, users 배열에서 찾기
          const actualUser = users.find(user => 
            user.userId === selectedUser.userId && 
            user.companyName === selectedUser.companyName
          );
          if (actualUser) {
            actualUserId = actualUser.id;
          }
        }
      }
      
      const result = await apiCall(API_ENDPOINTS.USER_DETAIL(actualUserId), {
        method: 'PUT',
        body: JSON.stringify(userData)
      });
      
      if (result.message) {
        await loadUsers();
        
        // selectedUser 업데이트 (모달이 열려있는 동안 데이터 동기화)
        if (selectedUser) {
          const updatedUser = {
            ...selectedUser,
            companyName: userData.company_name,
            userName: userData.user_name,
            email: userData.email,
            department: userData.department,
            mobilePhone: userData.mobile_phone,
            phoneNumber: userData.phone_number,
            faxNumber: userData.fax_number,
            address: userData.address,
            businessLicense: userData.business_license,
            notes: userData.notes,
            accountInfo: userData.account_info,
            companyType: userData.company_type,
            approvalStatus: userData.approval_status,
            isActive: userData.is_active,
            pricingPlan: userData.pricing_plan,
            startDate: userData.start_date,
            endDate: userData.end_date,
            managerPosition: userData.manager_position,
            accountantName: userData.accountant_name,
            accountantPosition: userData.accountant_position,
            accountantMobile: userData.accountant_mobile,
            accountantEmail: userData.accountant_email,
            representative: userData.representative,
            industry: userData.industry,
            msdsLimit: userData.msds_limit,
            aiImageLimit: userData.ai_image_limit,
            aiReportLimit: userData.ai_report_limit
          };
          setSelectedUser(updatedUser);
        }
        
        showMessage('success', '성공', '사용자 정보가 성공적으로 저장되었습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
        // 저장 성공 후 모달 닫기
        setShowDetailModal(false);
      } else {
        showMessage('error', '오류', result.error || '사용자 정보 저장에 실패했습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
      }
    } catch (error) {
      showMessage('error', '오류', '사용자 정보 저장 중 오류가 발생했습니다.', {
        showCancel: false,
        confirmText: '확인'
      });
    }
  };

  // 승인 관리 모달 열기
  const handleOpenApprovalModal = (user) => {
    setApprovalUser(user);
    setShowApprovalModal(true);
  };

  // 매출 모달 열기
  const handleOpenRevenueModal = (user) => {
    setRevenueUser({
      companyName: user.companyName || '',
      businessLicense: user.businessLicense || '',
      companyType: user.companyType || '',
      issueDate: '',
      paymentDate: '',
      paymentMethod: '세금계산서',
      item: '',
      supplyAmount: '',
      vat: '',
      totalAmount: ''
    });
    setShowRevenueModal(true);
  };


  // 매출 저장
  const handleRevenueSave = async (revenueData) => {
    // 사업자등록번호 유효성 검사
    if (revenueData.businessLicense && !isValidBusinessLicense(revenueData.businessLicense)) {
      messageProps.showMessage('error', '사업자등록번호 오류', '사업자등록번호는 숫자 10자리여야 합니다.', {
        showCancel: false,
        confirmText: '확인'
      });
      return;
    }
    
    // 필수 필드 검증
    if (!revenueData.companyName || !revenueData.businessLicense || !revenueData.issueDate || !revenueData.paymentMethod || !revenueData.companyType || !revenueData.item || !revenueData.supplyAmount) {
      messageProps.showMessage('error', '오류', '필수 항목을 모두 입력해주세요.', {
        showCancel: false,
        confirmText: '확인'
      });
      return;
    }

    try {
      // 날짜 형식 변환 (8자리 숫자를 DATE 형식으로 변환)
      let formattedIssueDate = revenueData.issueDate || null;
      let formattedPaymentDate = revenueData.paymentDate || null;
      
      // 콤마 제거하고 숫자로 변환하여 서버 데이터 구성
      const serverData = {
        company_name: revenueData.companyName,
        business_license: revenueData.businessLicense || '',
        issue_date: formattedIssueDate,
        payment_date: formattedPaymentDate,
        payment_method: revenueData.paymentMethod,
        company_type: revenueData.companyType,
        item: revenueData.item,
        supply_amount: parseFloat(revenueData.supplyAmount.replace(/,/g, '')) || 0,
        vat: parseFloat(revenueData.vat.replace(/,/g, '')) || 0,
        total_amount: parseFloat(revenueData.totalAmount.replace(/,/g, '')) || 0
      };

      const result = await apiCall(API_ENDPOINTS.REVENUE, {
        method: 'POST',
        body: JSON.stringify(serverData)
      });
      
      if (result.success) {
        messageProps.showMessage('success', '성공', '매출이 성공적으로 등록되었습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
        setShowRevenueModal(false);
        setRevenueUser(null);
      } else {
        messageProps.showMessage('error', '오류', result.error || '매출 등록 중 오류가 발생했습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
      }
    } catch (error) {
      messageProps.showMessage('error', '오류', '매출 등록 중 오류가 발생했습니다.', {
        showCancel: false,
        confirmText: '확인'
      });
    }
  };

  // 승인 저장
  const handleApprovalSave = async (approvalData) => {
    try {
      // 승인 관리 모드에서는 사업자등록번호 검증을 하지 않음
      // (승인 관리 모달에는 사업자등록번호 입력창이 없음)
      
      // 프론트엔드 필드명을 서버 필드명으로 변환
      const serverData = {
        id: approvalData.id,
        company_name: approvalData.companyName || approvalData.company_name,
        user_id: approvalData.userId || approvalData.user_id,
        email: approvalData.email,
        company_type: approvalData.companyType || approvalData.company_type,
        user_name: approvalData.userName || approvalData.user_name,
        department: approvalData.department,
        mobile_phone: approvalData.mobilePhone || approvalData.mobile_phone,
        business_license: approvalData.businessLicense || approvalData.business_license,
        phone_number: approvalData.phoneNumber || approvalData.phone_number,
        fax_number: approvalData.faxNumber || approvalData.fax_number,
        address: approvalData.address,
        notes: approvalData.notes || '',
        account_info: approvalData.accountInfo || approvalData.account_info || '',
        msds_limit: approvalData.msdsLimit || approvalData.msds_limit || 0,
        ai_image_limit: approvalData.aiImageLimit || approvalData.ai_image_limit || 0,
        ai_report_limit: approvalData.aiReportLimit || approvalData.ai_report_limit || 0,
        is_active: approvalData.isActive !== undefined ? approvalData.isActive : (approvalData.is_active !== undefined ? approvalData.is_active : true),
        approval_status: approvalData.approvalStatus || approvalData.approval_status,
        pricing_plan: approvalData.pricingPlan || approvalData.pricing_plan,
        start_date: approvalData.startDate || approvalData.start_date,
        end_date: approvalData.endDate || approvalData.end_date,
        manager_position: approvalData.position,
        accountant_name: approvalData.accountantName || approvalData.accountant_name,
        accountant_position: approvalData.accountantPosition || approvalData.accountant_position,
        accountant_mobile: approvalData.accountantMobile || approvalData.accountant_mobile || '',
        accountant_email: approvalData.accountantEmail || approvalData.accountant_email,
        representative: approvalData.representative || '',
        industry: approvalData.industry || ''
      };

      const result = await apiCall(API_ENDPOINTS.USER_DETAIL(approvalData.id), {
        method: 'PUT',
        body: JSON.stringify(serverData)
      });
      
      if (result.message) {
        // 서버에서 승인 이력을 자동으로 기록하므로 프론트엔드에서는 별도 처리 불필요
        
        // 상태가 변경된 경우 추가 메시지 표시
        if (result.statusChanged && result.newStatus === '승인 예정') {
          showMessage('info', '알림', '종료일이 지난 사용자로 인해 승인 예정 상태로 변경되었습니다.', {
            showCancel: false,
            confirmText: '확인'
          });
        } else {
          showMessage('success', '성공', '승인 정보가 성공적으로 저장되었습니다.', {
            showCancel: false,
            confirmText: '확인'
          });
        }
        
        setShowApprovalModal(false);
        setApprovalUser(null);
        await loadUsers();
        await fetchCompanyHistory();
      } else {
        showMessage('error', '오류', result.error || '승인 정보 저장에 실패했습니다.', {
        showCancel: false,
        confirmText: '확인'
      });
      }
    } catch (error) {
      showMessage('error', '오류', '승인 정보 저장 중 오류가 발생했습니다.', {
        showCancel: false,
        confirmText: '확인'
      });
    }
  };

  // 사용자 삭제
  const handleDeleteUser = async (user) => {
    // 통일된 메시지 팝업창으로 삭제 확인
    showMessage('warning', '사용자 삭제', '이 사용자를 삭제하시겠습니까?', {
      showCancel: true,
      confirmText: '삭제',
      cancelText: '취소',
      onConfirm: () => executeDeleteUser(user)
    });
  };

  // 실제 사용자 삭제 실행 함수
  const executeDeleteUser = async (user) => {
    try {
      const result = await apiCall(API_ENDPOINTS.USER_DETAIL(user.id), {
        method: 'DELETE'
      });
      
      if (result.message) {
        showMessage('success', '성공', '사용자가 성공적으로 삭제되었습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
        await loadUsers();
      } else {
        showMessage('error', '오류', result.error || '사용자 삭제에 실패했습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
      }
    } catch (error) {
      showMessage('error', '오류', '사용자 삭제 중 오류가 발생했습니다.', {
        showCancel: false,
        confirmText: '확인'
      });
    }
  };

  // 이력 삭제
  const handleDeleteHistory = async (historyId) => {
    // 통일된 메시지 팝업창으로 삭제 확인
    showMessage('warning', '이력 삭제', '이 이력을 삭제하시겠습니까?', {
      showCancel: true,
      confirmText: '삭제',
      cancelText: '취소',
      onConfirm: () => executeDeleteHistory(historyId)
    });
  };

  // 실제 삭제 실행 함수
  const executeDeleteHistory = async (historyId) => {
    try {
      const result = await apiCall(API_ENDPOINTS.HISTORY_USER(historyId), {
        method: 'DELETE'
      });
      
      if (result.success) {
        showMessage('success', '성공', '이력이 성공적으로 삭제되었습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
        await fetchCompanyHistory();
      } else {
        showMessage('error', '오류', result.error || '이력 삭제에 실패했습니다.', {
          showCancel: false,
          confirmText: '확인'
        });
      }
    } catch (error) {
      showMessage('error', '오류', '이력 삭제 중 오류가 발생했습니다.', {
        showCancel: false,
        confirmText: '확인'
      });
    }
  };

  if (loading) {
    return <div className="loading">로딩 중...</div>;
  }

  return (
    <div className="user-management">
      {/* 탭 네비게이션 */}
      {(
        <div className="user-tabs">
          <div className="user-tabs-left">
            <button 
              className={`tab-button ${activeTab === '전체' ? 'active' : ''}`}
              onClick={() => setActiveTab('전체')}
            >
              👥 전체 ({users.length}명)
            </button>
            <button 
              className={`tab-button ${activeTab === '무료' ? 'active' : ''}`}
              onClick={() => setActiveTab('무료')}
            >
              💰 무료 ({users.filter(user => 
                // 업체 형태와 상관없이 승인 예정 상태인 모든 사용자
                user.approvalStatus === '승인 예정'
              ).length}명)
            </button>
            <button 
              className={`tab-button ${activeTab === '컨설팅' ? 'active' : ''}`}
              onClick={() => setActiveTab('컨설팅')}
            >
              🏢 컨설팅 ({users.filter(user => 
                user.companyType === '컨설팅 업체' &&
                user.approvalStatus === '승인 완료'
              ).length}명)
            </button>
            <button 
              className={`tab-button ${activeTab === '일반' ? 'active' : ''}`}
              onClick={() => setActiveTab('일반')}
            >
              🏭 일반 ({users.filter(user => 
                user.companyType === '일반 업체' &&
                isUserActive({
                  approvalStatus: user.approvalStatus,
                  companyType: user.companyType,
                  pricingPlan: user.pricingPlan,
                  startDate: user.startDate,
                  endDate: user.endDate
                })
              ).length}명)
            </button>
            <button 
              className={`tab-button ${activeTab === '탈퇴' ? 'active' : ''}`}
              onClick={() => setActiveTab('탈퇴')}
            >
              🚪 탈퇴 ({users.filter(user => user.approvalStatus === '탈퇴').length}명)
            </button>
            <button 
              className={`tab-button ${activeTab === '승인' ? 'active' : ''}`}
              onClick={() => setActiveTab('승인')}
            >
              📋 승인 이력 ({Array.isArray(companyHistory) ? companyHistory.length : 0}건)
            </button>
          </div>
          <div className="user-tabs-right">
            <button 
              className="add-user-button"
              onClick={() => {
                // 모달 열기 전에 newUser 초기화
                setNewUser({
                  userId: '',
                  companyName: '',
                  userName: '',
                  email: '',
                  department: '',
                  mobilePhone: '',
                  phoneNumber: '',
                  faxNumber: '',
                  address: '',
                  businessLicense: '',
                  position: '',
                  startDate: '',
                  endDate: '',
                  pricingPlan: '무료',
                  approvalStatus: '승인 예정',
                  msdsLimit: 0,
                  aiImageLimit: 0,
                  aiReportLimit: 0
                });
                setShowAddUserModal(true);
              }}
            >
              사용자 추가
            </button>
          </div>
        </div>
      )}

      {/* 검색 필터 */}
      <SearchFilters 
        filters={searchFilters}
        onFilterChange={handleFilterChange}
        fields={userFilterFields}
      />

             {/* 사용자 목록 테이블 */}
      <UserTable 
        activeTab={activeTab}
        filteredUsers={getFilteredUsers()}
        formatDate={formatDate}
        handleDoubleClick={handleDoubleClick}
        handleDeleteUser={handleDeleteUser}
        handleApprovalUser={handleOpenApprovalModal}
        handleRevenueUser={handleOpenRevenueModal}
        isUserActive={isUserActive}
        showMessageRef={showMessageRef}
      />

      {/* 사용자 추가 모달 */}
      <AddUserModal
        isOpen={showAddUserModal}
        onClose={() => setShowAddUserModal(false)}
        onSave={handleAddUser}
        newUser={newUser}
        setNewUser={setNewUser}
        showMessage={showMessage}
      />

      {/* 사용자 상세 정보 모달 */}
        <UserDetailModal
          isOpen={showDetailModal}
          user={selectedUser}
        onClose={() => setShowDetailModal(false)}
          onSave={handleDetailSave}
          isEditable={true}
          showFooter={true}
          companyHistory={companyHistory}
          showMessage={showMessage}
        />

       {/* 승인 관리 모달 */}
       <ApprovalModal
         isOpen={showApprovalModal}
         user={approvalUser}
         onClose={() => setShowApprovalModal(false)}
         onSave={handleApprovalSave}
         companyHistory={companyHistory}
         showMessage={showMessage}
       />

       {/* 매출 입력 모달 */}
       <RevenueModal
         isOpen={showRevenueModal}
         onClose={() => setShowRevenueModal(false)}
         onSave={handleRevenueSave}
         mode="add"
         initialData={revenueUser}
         title="매출 입력"
       />

        {/* 메시지 팝업창 */}
        <MessageModal
          isOpen={messageProps.showMessageModal}
          messageData={messageProps.messageData}
          onConfirm={messageProps.handleMessageConfirm}
          onCancel={messageProps.handleMessageCancel}
        />
      </div>
    );
};

export default UserManagement;